@startuml
!theme materia

package "Controller Layer" {
    class BrandController {
        +createBrand(brand: Brand): ResponseEntity<Brand>
        +listBrands(page: int, size: int): ResponseEntity<List<Brand>>
        +getBrandById(brandId: String): ResponseEntity<Brand>
        +updateBrand(brandId: String, brand: Brand): ResponseEntity<Brand>
        +deleteBrand(brandId: String): ResponseEntity<?>
        +createCampaignForBrand(brandId: String, campaign: Campaign): ResponseEntity<Campaign>
        +listCampaignsForBrand(brandId: String, page: int, size: int): ResponseEntity<List<Campaign>>
        +listCreativesForCampaign(brandId: String, campaignId: String, page: int, size: int): ResponseEntity<List<Creative>>
        +uploadCreative(brandId: String, campaignId: String, file: MultipartFile, name: String, description: String): ResponseEntity<Creative>
    }
    class CampaignController {
        +createCampaign(campaign: Campaign): ResponseEntity<Campaign>
        +listCampaigns(page: int, size: int): ResponseEntity<List<Campaign>>
        +getCampaignById(campaignId: String): ResponseEntity<Campaign>
        +updateCampaign(campaignId: String, campaign: Campaign): ResponseEntity<Campaign>
        +deleteCampaign(campaignId: String): ResponseEntity<?>
    }
    class CreativeController {
        +createCreative(creative: Creative): ResponseEntity<Creative>
        +listCreatives(page: int, size: int): ResponseEntity<List<Creative>>
        +getCreativeById(creativeId: String): ResponseEntity<Creative>
        +updateCreative(creativeId: String, creative: Creative): ResponseEntity<Creative>
        +deleteCreative(creativeId: String): ResponseEntity<?>
    }
}

package "Service Layer" {
    class ManageBrandUseCaseImpl {
        +createBrand(brand: Brand): Brand
        +listBrands(pageable: Pageable): List<Brand>
        +getBrandById(brandId: String): Optional<Brand>
        +updateBrand(brandId: String, brand: Brand): Optional<Brand>
        +deleteBrand(brandId: String): boolean
    }
    class ManageCampaignUseCaseImpl {
        +createCampaignForBrand(brandId: String, campaign: Campaign): Campaign
        +findCampaignsByBrandId(brandId: String, pageable: Pageable): List<Campaign>
        +findCreativesByBrandIdAndCampaignId(brandId: String, campaignId: String, pageable: Pageable): List<Creative>
        +uploadCreativeForCampaign(brandId: String, campaignId: String, creativeUploadDTO: CreativeUploadDTO): Creative
    }
    class ManageCreativeUseCaseImpl {
        +createCreative(creative: Creative): Creative
        +listCreatives(pageRequest: PageRequest): List<Creative>
        +getCreativeById(creativeId: String): Optional<Creative>
        +updateCreative(creativeId: String, creative: Creative): Optional<Creative>
        +deleteCreative(creativeId: String): boolean
    }
}

package "Repository Layer" {
    class BrandRepository {
    }
    class CampaignRepository {
    }
    class CreativeRepository {
    }
}

package "Model Layer" {
    class BrandEntity {
        -id: String
        -name: String
        -description: String
    }
    class CampaignEntity {
        -id: String
        -name: String
        -description: String
        -brandId: String
    }
    class CreativeEntity {
        -id: String
        -name: String
        -description: String
        -creativeUrl: String
        -campaignId: String
    }
}

package "Domain Layer" {
    class Brand {
    }
    class Campaign {
    }
    class Creative {
    }
}

BrandController --> ManageBrandUseCaseImpl : uses
BrandController --> ManageCampaignUseCaseImpl : uses
BrandController --> ManageCreativeUseCaseImpl : uses
CampaignController --> ManageCampaignUseCaseImpl : uses
CreativeController --> ManageCreativeUseCaseImpl : uses

package "Infrastructure Layer" {
    class MongoDBConfig {
        +mongoTemplate(): MongoTemplate
    }
}

MongoDBConfig ..> "Repository Layer"

@enduml